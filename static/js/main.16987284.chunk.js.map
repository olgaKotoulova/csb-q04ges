{"version":3,"sources":["App.js","index.js"],"names":["App","console","log","operation","add","multiply","concat","_jsxs","className","children","_jsx","a","b","operator","implicitArguments","Array","from","arguments","slice","apply","_toConsumableArray","string1","string2","rootElement","document","getElementById","createRoot","render","StrictMode"],"mappings":"mKAEe,SAASA,IAQtB,OAJAC,QAAQC,IAAIC,EAAUC,EAAK,GAAI,KAC/BH,QAAQC,IAAIC,EAAUE,EAAU,GAAI,GAAI,GAAI,GAAI,KAChDC,EAAO,UAAPA,CAAkB,WAGhBC,eAAA,OAAKC,UAAU,MAAKC,SAAA,CAClBC,cAAA,MAAAD,SAAI,sBACJC,cAAA,MAAAD,SAAI,8CAGV,CAgBA,SAASL,EAAIO,EAAGC,GACd,OAAOD,EAAIC,CACb,CACA,SAASP,EAASM,EAAGC,GACnB,OAAOD,EAAIC,CACb,CAEA,SAAST,EAAUU,GAEjB,IAAIC,EAAoBC,MAAMC,KAAKC,WAAWC,MAAM,GAMpD,OAAOL,EAAQM,WAAC,EAADC,YAAIN,GACrB,CAmBA,IAAMR,EAAS,SAACe,GAAO,OAAK,SAACC,GAAO,OAAKD,EAAUC,CAAQ,CAAD,EC9DpDC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACHjB,cAACkB,aAAU,CAAAnB,SACTC,cAACV,EAAG,M","file":"static/js/main.16987284.chunk.js","sourcesContent":["import \"./styles.css\";\n\nexport default function App() {\n  variadicFunction1(\"a\", \"b\");\n  variadicFunction2(\"c\", \"d\", \"e\");\n  variadicFunction2(\"f\");\n  console.log(operation(add, 10, 20));\n  console.log(operation(multiply, 10, 20, 30, 40, 50));\n  concat(\"string1\")(\"string2\");\n\n  return (\n    <div className=\"App\">\n      <h1>Hello CodeSandbox</h1>\n      <h2>Start editing to see some magic happen!</h2>\n    </div>\n  );\n}\n\nfunction variadicFunction1() {\n  //console.log(\"===Arguments Object1===\");\n  //Array.from(arguments).forEach((arg) => console.log(arg));\n  return null;\n}\nfunction variadicFunction2(a, b) {\n  //console.log(\"===Declared Parameters2===\");\n  //console.log(a);\n  //console.log(b);\n  //console.log(\"===Arguments Object2===\");\n  //Array.from(arguments).forEach((arg) => console.log(arg));\n  return null;\n}\n\nfunction add(a, b) {\n  return a + b;\n}\nfunction multiply(a, b) {\n  return a * b;\n}\n\nfunction operation(operator) {\n  // Take all but the first argument\n  let implicitArguments = Array.from(arguments).slice(1);\n  // Same thing using rest operator\n  //let [operator1, ...implicitArguments2] = [...arguments];\n  //console.log(operator1, implicitArguments2);\n\n  // spread the array arguments into the function execution\n  return operator(...implicitArguments);\n}\n\n/*\nA pattern that is central to point-free style is that of \ndata-last function signatures. This pattern emerges from the\npractice of currying a function. A curried function is a \nfunction that always takes and applies one argument at a time.\nInstead of thinking of a function as taking multiple arguments\nand then producing a single output, we must think of our\nfunction as a series of steps before finally arriving at\na \"final\" value.\n*/\nfunction concat2(string1) {\n  return function (string2) {\n    return string1 + string2;\n  };\n}\n\n// or using a cleaner function expression syntax\nconst concat = (string1) => (string2) => string1 + string2;\n\n//rozepsano\nconst concat1 = (string1) => {\n  return (string2) => {\n    return string1 + string2;\n  };\n};\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}